# Design Coverage Report: {{ component_name }}

**Generated on:** {{ timestamp }}  
**Component Type:** {{ component_type }}  
**Session ID:** {{ session_id }}

---

## üìä Detailed Analysis

### Questions Answered
**Total Questions:** {{ total_questions }}  
**Answered:** {{ answered_questions }}  
**Completion Rate:** {{ (answered_questions / total_questions * 100) | round(1) }}%

#### By Category
{% for category, stats in question_stats.items() %}
- **{{ category | title | replace('_', ' ') }}**: {{ stats.answered }}/{{ stats.total }} ({{ (stats.answered / stats.total * 100) | round(1) }}%)
{% endfor %}

### Pattern Matching Results
{% if patterns_detected %}
**Detected Patterns:**
{% for pattern in patterns_detected %}
- **{{ pattern.name }}**: {{ pattern.confidence }}% confidence
  - Triggered additional questions: {{ pattern.questions_added }}
  - Specific concerns addressed: {{ pattern.concerns | join(', ') }}
{% endfor %}
{% else %}
No specific patterns detected - using generic component assessment.
{% endif %}

### Time Investment
- **Session Duration:** {{ session_duration }}
- **Questions per Minute:** {{ questions_per_minute }}
- **Thoughtfulness Score:** {{ thoughtfulness_score }}/5

---

## üîç Component-Specific Insights

{% if component_type == 'storage' %}
### Storage Component Analysis
{% if backup_strategy %}
‚úÖ **Backup Strategy Defined:** {{ backup_strategy }}
{% else %}
‚ùå **Missing Backup Strategy:** Critical for data protection
{% endif %}

{% if data_integrity %}
‚úÖ **Data Integrity Measures:** {{ data_integrity }}
{% else %}
‚ö†Ô∏è **Data Integrity:** Consider corruption detection mechanisms
{% endif %}

{% elif component_type == 'ui' %}
### UI Component Analysis
{% if component_states %}
‚úÖ **States Defined:** {{ component_states | length }} states identified
- {{ component_states | join(', ') }}
{% else %}
‚ùå **Missing States:** UI components need clear state definitions
{% endif %}

{% if accessibility_notes %}
‚úÖ **Accessibility Considered:** {{ accessibility_notes }}
{% else %}
‚ö†Ô∏è **Accessibility:** Consider screen reader and keyboard navigation
{% endif %}

{% elif component_type == 'api' %}
### API Component Analysis
{% if authentication %}
‚úÖ **Authentication Defined:** {{ authentication }}
{% else %}
‚ùå **Missing Authentication:** Critical security requirement
{% endif %}

{% if rate_limiting %}
‚úÖ **Rate Limiting:** {{ rate_limiting }}
{% else %}
‚ö†Ô∏è **Rate Limiting:** Consider abuse protection
{% endif %}

{% if error_codes %}
‚úÖ **Error Codes Defined:** {{ error_codes | length }} error scenarios
{% else %}
‚ö†Ô∏è **Error Codes:** Define specific HTTP status codes
{% endif %}

{% elif component_type == 'ai' %}
### AI Component Analysis
{% if safety_guardrails %}
‚úÖ **Safety Guardrails:** {{ safety_guardrails }}
{% else %}
‚ùå **Missing Safety Measures:** Critical for AI components
{% endif %}

{% if cost_constraints %}
‚úÖ **Cost Controls:** {{ cost_constraints }}
{% else %}
‚ö†Ô∏è **Cost Management:** AI usage can be expensive
{% endif %}

{% if fallback_strategies %}
‚úÖ **Fallback Strategies:** {{ fallback_strategies }}
{% else %}
‚ùå **Missing Fallbacks:** What happens when AI fails?
{% endif %}
{% endif %}

---

## üìö Learning Opportunities

### Design Patterns You Applied Well
{% for pattern in positive_patterns %}
- **{{ pattern.name }}**: {{ pattern.description }}
  - *Why this is good:* {{ pattern.benefit }}
{% endfor %}

### Design Patterns to Consider
{% for pattern in suggested_patterns %}
- **{{ pattern.name }}**: {{ pattern.description }}
  - *When to use:* {{ pattern.when_to_use }}
  - *Benefits:* {{ pattern.benefits }}
{% endfor %}

### Industry Best Practices
{% for practice in best_practices %}
**{{ practice.category }}**  
{{ practice.description }}
{% if practice.examples %}
*Examples:* {{ practice.examples | join(', ') }}
{% endif %}
{% endfor %}

---

## üèÜ Quality Comparison

### Compared to Similar Components
{% if benchmark_data %}
| Metric | Your Score | Typical Range | Industry Best |
|--------|------------|---------------|---------------|
{% for metric, data in benchmark_data.items() %}
| {{ metric | title | replace('_', ' ') }} | {{ data.your_score }}% | {{ data.typical_range }} | {{ data.industry_best }}% |
{% endfor %}
{% endif %}

### Areas Where You Excel
{% for strength in strengths %}
- **{{ strength.area }}**: {{ strength.description }}
{% endfor %}

### Growth Areas
{% for growth in growth_areas %}
- **{{ growth.area }}**: {{ growth.suggestion }}
{% endfor %}

---

## üîó Related Resources

### Documentation to Review
{% for doc in related_docs %}
- [{{ doc.title }}]({{ doc.url }}) - {{ doc.description }}
{% endfor %}

### Similar Components for Reference
{% for ref in reference_components %}
- **{{ ref.name }}**: {{ ref.description }}
  - Why it's relevant: {{ ref.relevance }}
{% endfor %}

### Tools and Libraries
{% for tool in recommended_tools %}
- **{{ tool.name }}**: {{ tool.description }}
  - Use case: {{ tool.use_case }}
{% endfor %}

---

*Report generated by SpecPlane Coverage Assessor v{{ assessor_version }}*  
*For questions about this report, review the [SpecPlane Documentation](https://docs.specplane.dev)*

## üìä Coverage Summary

| **Overall Score** | **{{ coverage_score }}%** |
|-------------------|----------------------------|
| **Status** | {{ 'EXCELLENT' if coverage_score >= 90 else 'GOOD' if coverage_score >= 75 else 'ACCEPTABLE' if coverage_score >= 60 else 'NEEDS WORK' }} |
| **Quality Level** | {{ quality_level }} |

### Score Breakdown
{% for section, score in section_scores.items() %}
- **{{ section | title | replace('_', ' ') }}**: {{ score }}%
{% endfor %}

---

## ‚úÖ Completed Sections

{% for section in completed_sections %}
### {{ section.name | title | replace('_', ' ') }}
**Coverage:** {{ section.coverage }}%  
**Quality:** {{ section.quality }}

{{ section.summary }}

{% if section.highlights %}
**Key Highlights:**
{% for highlight in section.highlights %}
- {{ highlight }}
{% endfor %}
{% endif %}
{% endfor %}

---

## ‚ö†Ô∏è Gaps and Missing Elements

{% if critical_gaps %}
### üö® Critical Gaps (Must Fix)
{% for gap in critical_gaps %}
**{{ gap.title }}**
- **Impact:** {{ gap.impact }}
- **Recommendation:** {{ gap.recommendation }}
- **Priority:** HIGH
{% if gap.example %}
- **Example:** {{ gap.example }}
{% endif %}

{% endfor %}
{% endif %}

{% if important_gaps %}
### ‚ö° Important Gaps (Should Fix)
{% for gap in important_gaps %}
**{{ gap.title }}**
- **Impact:** {{ gap.impact }}
- **Recommendation:** {{ gap.recommendation }}
- **Priority:** MEDIUM
{% if gap.example %}
- **Example:** {{ gap.example }}
{% endif %}

{% endfor %}
{% endif %}

{% if moderate_gaps %}
### üìù Moderate Gaps (Consider Fixing)
{% for gap in moderate_gaps %}
**{{ gap.title }}**
- **Impact:** {{ gap.impact }}
- **Recommendation:** {{ gap.recommendation }}
- **Priority:** LOW

{% endfor %}
{% endif %}

{% if not critical_gaps and not important_gaps and not moderate_gaps %}
### üéâ No Critical Gaps Detected!
Your component design shows comprehensive coverage across all major areas.
{% endif %}

---

## üí° Improvement Recommendations

### Quick Wins (1-2 hours)
{% for rec in quick_wins %}
- **{{ rec.title }}**: {{ rec.description }}
  - *Why it matters:* {{ rec.benefit }}
{% endfor %}

### Medium Effort (1-2 days)
{% for rec in medium_effort %}
- **{{ rec.title }}**: {{ rec.description }}
  - *Why it matters:* {{ rec.benefit }}
{% endfor %}

### Long Term (1+ weeks)
{% for rec in long_term %}
- **{{ rec.title }}**: {{ rec.description }}
  - *Why it matters:* {{ rec.benefit }}
{% endfor %}

---

## üìà Quality Assessment

### Design Thinking Quality
{% for aspect, rating in quality_ratings.items() %}
- **{{ aspect | title | replace('_', ' ') }}**: {{ '‚≠ê' * rating }}{{ '‚òÜ' * (5 - rating) }} ({{ rating }}/5)
{% endfor %}

### Specific Feedback
{% for feedback in specific_feedback %}
**{{ feedback.category }}**  
{{ feedback.message }}
{% if feedback.suggestion %}
*Suggestion:* {{ feedback.suggestion }}
{% endif %}

{% endfor %}

---

## üéØ Implementation Readiness

| Area | Status | Notes |
|------|--------|-------|
{% for area, status in readiness_assessment.items() %}
| {{ area | title | replace('_', ' ') }} | {{ '‚úÖ Ready' if status.ready else '‚ö†Ô∏è Needs Work' if status.score > 50 else '‚ùå Not Ready' }} | {{ status.notes }} |
{% endfor %}

### Overall Readiness: {{ 'READY TO IMPLEMENT' if overall_readiness >= 70 else 'NEEDS MORE WORK' if overall_readiness >= 50 else 'NOT READY' }}

{% if overall_readiness >= 70 %}
üéâ **Great job!** Your component design is well thought out and ready for implementation.
{% elif overall_readiness >= 50 %}
‚ö° **Almost there!** Address the critical gaps above and you'll be ready to build.
{% else %}
üìù **More work needed.** Consider answering more questions to strengthen your design.
{% endif %}

---

## üìã Next Steps

### Immediate Actions
1. **Address Critical Gaps**: Focus on the {{ critical_gaps | length }} critical issues listed above
{% if important_gaps %}
2. **Review Important Gaps**: Consider the {{ important_gaps | length }} important improvements
{% endif %}
3. **Generate Implementation Artifacts**: Use SpecPlane to create code templates

### Before You Code
- [ ] Review all critical gaps and address them
- [ ] Validate your approach with team members
- [ ] Ensure you have clear success criteria
- [ ] Set up monitoring for key metrics

### Implementation Order
{% if implementation_order %}
{% for step in implementation_order %}
{{ loop.index }}. **{{ step.phase }}**: {{ step.description }}
   - Focus: {{ step.focus }}
   - Expected outcome: {{ step.outcome }}
{% endfor %}
{% else %}
1. **Core Functionality**: Implement basic happy path
2. **Error Handling**: Add failure scenarios and edge cases
3. **Observability**: Add logging, metrics, and monitoring
4. **Polish**: Performance optimization and user experience
{% endif %}

---