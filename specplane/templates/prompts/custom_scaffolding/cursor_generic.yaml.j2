# Implementation Requirements for {{ component_name }}

## Purpose
{{ purpose_statement }}

{% if success_criteria %}
## Success Criteria
{% for criterion in success_criteria %}
- **{{ criterion.metric }}**: {{ criterion.target }}
{% endfor %}
{% endif %}

## Critical Requirements

### Core Functionality
{% for interface in interfaces %}
- **{{ interface.name }}**: {{ interface.description | default(interface.input + ' → ' + interface.output) }}
{% endfor %}

{% if failure_modes %}
### Failure Handling (Critical)
{% for mode in failure_modes %}
- **{{ mode.type | title }}**: {{ mode.impact }} 
  - Mitigation: {{ mode.mitigation | default('Implement graceful degradation') }}
{% endfor %}
{% endif %}

{% if edge_cases %}
### Edge Cases to Handle
{% for case in edge_cases %}
- **{{ case.name }}**: {{ case.scenario }}
  - Expected behavior: {{ case.handling | default('Handle gracefully with appropriate feedback') }}
{% endfor %}
{% endif %}

{% if component_states %}
## State Management
Component must handle these states:
{% for state in component_states %}
- **{{ state }}**: {{ states[state].description | default('State when ' + state) }}
{% endfor %}
{% endif %}

{% if data_displayed or data_captured %}
## Data Flow
{% if data_displayed %}
- **Data to Display**: {{ data_displayed }}
{% endif %}
{% if data_captured %}
- **Data to Capture**: {{ data_captured }}
{% endif %}
{% if data_validation %}
- **Validation Requirements**: {{ data_validation }}
{% endif %}
{% endif %}

{% if api_dependencies %}
## External Dependencies
{% for dep in api_dependencies %}
- **{{ dep.name if dep.name is defined else dep }}**: {{ dep.purpose if dep.purpose is defined else 'External service integration' }}
  {% if dep.fallback %}
  - Fallback: {{ dep.fallback }}
  {% endif %}
{% endfor %}
{% endif %}

{% if performance_requirements %}
## Performance Requirements
{% for req in performance_requirements %}
- **{{ req.metric | title }}**: {{ req.target }}
{% endfor %}
{% endif %}

{% if security_requirements %}
## Security Requirements
{% for req in security_requirements %}
- **{{ req.aspect | title }}**: {{ req.requirement }}
{% endfor %}
{% endif %}

## Implementation Guidance

### Architecture Approach
1. **Start Simple**: Implement core functionality first
2. **Error-First Design**: Handle failure cases before success cases
3. **State Management**: Clearly define and manage all component states
4. **Testing Strategy**: Write tests for both happy path and error scenarios

### Code Organization
```
{{ component_name | lower | replace(' ', '_') }}/
├── index.{{ file_extension | default('js') }}          # Main component entry
├── {{ component_name | lower | replace(' ', '_') }}.{{ file_extension | default('js') }}     # Core implementation
{% if component_states %}
├── states.{{ file_extension | default('js') }}         # State management
{% endif %}
{% if api_dependencies %}
├── api.{{ file_extension | default('js') }}            # External service integration
{% endif %}
├── utils.{{ file_extension | default('js') }}          # Helper functions
└── {{ component_name | lower | replace(' ', '_') }}.test.{{ file_extension | default('js') }} # Tests
```

### Key Implementation Notes
{% if failure_modes %}
- **Error Handling**: Every external call must have proper error handling
{% endif %}
{% if edge_cases %}
- **Edge Cases**: Implement graceful handling for all identified edge cases
{% endif %}
{% if monitoring_requirements %}
- **Observability**: Add logging/metrics for {{ monitoring_requirements | join(', ') }}
{% endif %}
- **Validation**: Validate all inputs before processing
- **Documentation**: Add clear comments for complex logic

## Validation Criteria

### Must Have
- [ ] Core functionality works as specified
{% for interface in interfaces %}
- [ ] {{ interface.name }} interface implemented correctly
{% endfor %}
{% if failure_modes %}
{% for mode in failure_modes %}
- [ ] {{ mode.type }} handled gracefully
{% endfor %}
{% endif %}

### Should Have
{% if edge_cases %}
{% for case in edge_cases %}
- [ ] {{ case.name }} edge case handled
{% endfor %}
{% endif %}
{% if performance_requirements %}
{% for req in performance_requirements %}
- [ ] {{ req.metric }} meets {{ req.target }} target
{% endfor %}
{% endif %}

### Nice to Have
{% if monitoring_requirements %}
- [ ] Monitoring and logging implemented
{% endif %}
- [ ] Comprehensive test coverage
- [ ] Clear documentation and comments

## Testing Approach
1. **Unit Tests**: Test each function/method in isolation
2. **Integration Tests**: Test component interactions
3. **Error Scenario Tests**: Test all failure modes
4. **Edge Case Tests**: Test boundary conditions
{% if performance_requirements %}
5. **Performance Tests**: Verify performance requirements
{% endif %}

---
*Generated by SpecPlane - Review and adapt this implementation guide as needed*