# React Implementation for {{ component_name }}

## Purpose
{{ purpose_statement }}

## Component Overview
Create a React component that handles {{ component_states | length if component_states else 'multiple' }} states and provides {{ interfaces | length if interfaces else 'core' }} main interactions.

## Component Structure

### Props Interface
```typescript
interface {{ component_name.replace(' ', '') }}Props {
  {% if data_displayed %}
  data?: {{ data_displayed | replace(' ', '') | title }}Data;
  {% endif %}
  {% if data_captured %}
  onDataChange?: (data: {{ data_captured | replace(' ', '') | title }}Data) => void;
  {% endif %}
  {% for interface in interfaces %}
  {{ interface.name | camelCase }}?: {{ interface.input }} => {{ interface.output }};
  {% endfor %}
  className?: string;
  disabled?: boolean;
}
```

### State Management
```typescript
{% if component_states %}
type ComponentState = {% for state in component_states %}'{{ state }}'{% if not loop.last %} | {% endif %}{% endfor %};

const [currentState, setCurrentState] = useState<ComponentState>('{{ component_states[0] }}');
{% endif %}
{% if data_captured %}
const [formData, setFormData] = useState<{{ data_captured | replace(' ', '') | title }}Data>({});
{% endif %}
{% if failure_modes %}
const [error, setError] = useState<string | null>(null);
const [isLoading, setIsLoading] = useState(false);
{% endif %}
```

## Core Implementation

### Main Component
```tsx
export const {{ component_name.replace(' ', '') }}: React.FC<{{ component_name.replace(' ', '') }}Props> = ({
  {% if data_displayed %}data,{% endif %}
  {% if data_captured %}onDataChange,{% endif %}
  {% for interface in interfaces %}
  {{ interface.name | camelCase }},
  {% endfor %}
  className,
  disabled = false
}) => {
  // State hooks here
  
  {% if failure_modes %}
  // Error handling
  const handleError = useCallback((error: Error) => {
    setError(error.message);
    setIsLoading(false);
    // Log error for monitoring
    console.error('{{ component_name }} error:', error);
  }, []);
  {% endif %}

  {% for interface in interfaces %}
  // {{ interface.name }} handler
  const handle{{ interface.name | title }} = useCallback(async (input: {{ interface.input }}) => {
    {% if failure_modes %}
    setIsLoading(true);
    setError(null);
    {% endif %}
    
    try {
      {% if interface.name | camelCase %}
      const result = await {{ interface.name | camelCase }}?.(input);
      {% endif %}
      // Handle successful result
      {% if component_states %}
      setCurrentState('success'); // or appropriate state
      {% endif %}
      return result;
    } catch (error) {
      {% if failure_modes %}
      handleError(error as Error);
      {% endif %}
      throw error;
    }
  }, [{{ interface.name | camelCase }}{% if failure_modes %}, handleError{% endif %}]);
  {% endfor %}

  {% if edge_cases %}
  // Edge case handlers
  {% for case in edge_cases %}
  const handle{{ case.name | title | replace(' ', '') }} = useCallback(() => {
    // {{ case.scenario }}
    // Implementation for {{ case.handling | default('graceful handling') }}
  }, []);
  {% endfor %}
  {% endif %}

  return (
    <div className={cn("{{ component_name | kebabCase }}", className)}>
      {% if component_states %}
      {/* Conditional rendering based on state */}
      {% for state in component_states %}
      {currentState === '{{ state }}' && (
        <div className="{{ state }}-state">
          {/* {{ state | title }} state UI */}
          {{ states[state].display if states and states[state] and states[state].display else 'Content for ' + state + ' state' }}
        </div>
      )}
      {% endfor %}
      {% endif %}

      {% if failure_modes %}
      {/* Error display */}
      {error && (
        <div className="error-message" role="alert">
          {error}
          <button onClick={() => setError(null)}>Dismiss</button>
        </div>
      )}
      {% endif %}

      {% if data_captured %}
      {/* Form elements for data capture */}
      <form onSubmit={handleSubmit}>
        {/* Form fields based on {{ data_captured }} */}
      </form>
      {% endif %}
    </div>
  );
};
```

## State-Specific Implementations

{% for state in component_states %}
### {{ state | title }} State
```tsx
const {{ state | title }}State: React.FC = () => (
  <div className="{{ state }}-container">
    {/* {{ states[state].display if states and states[state] and states[state].display else 'Visual representation for ' + state }} */}
    {% if states and states[state] and states[state].actions %}
    <div className="actions">
      {% for action in states[state].actions %}
      <button onClick={handle{{ action | title }}}>
        {{ action | title }}
      </button>
      {% endfor %}
    </div>
    {% endif %}
  </div>
);
```
{% endfor %}

## Error Handling Patterns

{% for mode in failure_modes %}
### {{ mode.type | title }} Handling
```tsx
// Handle {{ mode.type }}
const handle{{ mode.type | title | replace(' ', '') }} = useCallback(() => {
  // {{ mode.impact }}
  setError("{{ mode.user_message | default('An error occurred. Please try again.') }}");
  
  {% if mode.recovery %}
  // Recovery action: {{ mode.recovery }}
  {% endif %}
  
  {% if mode.fallback %}
  // Fallback to: {{ mode.fallback }}
  setCurrentState('{{ mode.fallback }}');
  {% endif %}
}, []);
```
{% endfor %}

## Accessibility Implementation

```tsx
// Add these attributes for accessibility
const accessibilityProps = {
  role: "{{ component_type | default('region') }}",
  'aria-label': "{{ component_name }}",
  {% if component_states %}
  'aria-live': currentState === 'loading' ? 'polite' : 'off',
  {% endif %}
  {% if failure_modes %}
  'aria-invalid': error ? 'true' : 'false',
  {% endif %}
};
```

## Performance Optimizations

```tsx
// Memoize expensive calculations
{% if data_displayed %}
const processedData = useMemo(() => {
  return processData(data);
}, [data]);
{% endif %}

// Debounce user inputs
{% if data_captured %}
const debouncedOnChange = useMemo(
  () => debounce(onDataChange, 300),
  [onDataChange]
);
{% endif %}

// Optimize re-renders
export default memo({{ component_name.replace(' ', '') }});
```

## Testing Strategy

```tsx
// Test file: {{ component_name.replace(' ', '') }}.test.tsx
describe('{{ component_name }}', () => {
  {% for interface in interfaces %}
  it('should handle {{ interface.name }} correctly', async () => {
    // Test {{ interface.name }} functionality
  });
  {% endfor %}

  {% for state in component_states %}
  it('should render {{ state }} state correctly', () => {
    // Test {{ state }} state rendering
  });
  {% endfor %}

  {% for mode in failure_modes %}
  it('should handle {{ mode.type }} gracefully', async () => {
    // Test {{ mode.type }} error handling
  });
  {% endfor %}

  {% if accessibility_notes %}
  it('should be accessible', () => {
    // Test accessibility requirements
    // {{ accessibility_notes }}
  });
  {% endif %}
});
```

## Styling (Tailwind CSS)

```css
/* Component-specific styles */
.{{ component_name | kebabCase }} {
  {% if responsive_behavior %}
  /* Responsive design */
  @apply w-full;
  @media (min-width: 768px) {
    /* Tablet styles */
  }
  @media (min-width: 1024px) {
    /* Desktop styles */
  }
  {% endif %}
}

{% for state in component_states %}
.{{ state }}-state {
  /* Styles for {{ state }} state */
  @apply {{ 'opacity-50' if state == 'loading' else 'opacity-100' }};
}
{% endfor %}

.error-message {
  @apply bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded;
}
```

## Implementation Checklist

### Core Functionality
- [ ] Component renders without errors
{% for interface in interfaces %}
- [ ] {{ interface.name }} implemented and working
{% endfor %}
{% for state in component_states %}
- [ ] {{ state }} state handled correctly
{% endfor %}

### Error Handling
{% for mode in failure_modes %}
- [ ] {{ mode.type }} handled gracefully
{% endfor %}

### Accessibility
- [ ] ARIA labels and roles implemented
- [ ] Keyboard navigation works
- [ ] Screen reader compatibility
{% if accessibility_notes %}
- [ ] {{ accessibility_notes }}
{% endif %}

### Performance
- [ ] Component memoized where appropriate
- [ ] No unnecessary re-renders
{% if performance_requirements %}
{% for req in performance_requirements %}
- [ ] {{ req.metric }} meets {{ req.target }}
{% endfor %}
{% endif %}

### Testing
- [ ] Unit tests for all functions
- [ ] Integration tests for user flows
- [ ] Accessibility tests
- [ ] Error scenario tests

---
*React implementation guide generated by SpecPlane*