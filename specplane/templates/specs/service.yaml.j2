meta:
  id: "{{ component_name | lower | replace(' ', '_') }}"
  name: "{{ component_name }}"
  version: "0.1.0"
  type: "service"
  level: "component"
  purpose: "{{ purpose_statement }}"
  status: "prototype"

contracts:
  api_endpoints:
    {% for endpoint in api_endpoints %}
    - path: "{{ endpoint.path }}"
      method: "{{ endpoint.method }}"
      purpose: "{{ endpoint.purpose }}"
      {% if endpoint.input %}
      request_schema: "{{ endpoint.input }}"
      {% endif %}
      {% if endpoint.output %}
      response_schema: "{{ endpoint.output }}"
      {% endif %}
      {% if endpoint.auth_required %}
      authentication: "{{ endpoint.auth_required }}"
      {% endif %}
    {% endfor %}

{% if authentication %}
authentication:
  method: "{{ authentication.method }}"
  {% if authentication.requirements %}
  requirements: "{{ authentication.requirements }}"
  {% endif %}
  {% if authentication.token_expiry %}
  token_expiry: "{{ authentication.token_expiry }}"
  {% endif %}
{% endif %}

{% if rate_limiting %}
rate_limiting:
  {% for limit in rate_limiting %}
  {{ limit.scope }}:
    requests_per_minute: {{ limit.rpm }}
    {% if limit.burst %}
    burst_limit: {{ limit.burst }}
    {% endif %}
  {% endfor %}
{% endif %}

{% if error_codes %}
error_handling:
  status_codes:
    {% for error in error_codes %}
    {{ error.code }}:
      description: "{{ error.description }}"
      response_format: "{{ error.format | default('JSON error object') }}"
      {% if error.recovery %}
      recovery_guidance: "{{ error.recovery }}"
      {% endif %}
    {% endfor %}
{% endif %}

{% if data_storage %}
data_management:
  storage: "{{ data_storage.type }}"
  {% if data_storage.backup %}
  backup_strategy: "{{ data_storage.backup }}"
  {% endif %}
  {% if data_storage.retention %}
  retention_policy: "{{ data_storage.retention }}"
  {% endif %}
  {% if data_storage.encryption %}
  encryption: "{{ data_storage.encryption }}"
  {% endif %}
{% endif %}

{% if failure_modes %}
failure_scenarios:
  {% for mode in failure_modes %}
  {{ mode.type }}:
    impact: "{{ mode.impact }}"
    detection: "{{ mode.detection | default('Service health checks') }}"
    mitigation: "{{ mode.mitigation | default('Graceful degradation') }}"
    {% if mode.recovery_time %}
    recovery_time: "{{ mode.recovery_time }}"
    {% endif %}
  {% endfor %}
{% endif %}

{% if api_dependencies or internal_dependencies %}
dependencies:
  {% if api_dependencies %}
  external_services:
    {% for dep in api_dependencies %}
    - service: "{{ dep.name }}"
      purpose: "{{ dep.purpose }}"
      {% if dep.fallback %}
      fallback_strategy: "{{ dep.fallback }}"
      {% endif %}
      {% if dep.timeout %}
      timeout: "{{ dep.timeout }}"
      {% endif %}
    {% endfor %}
  {% endif %}
  {% if internal_dependencies %}
  internal:
    {% for dep in internal_dependencies %}
    - "{{ dep }}"
    {% endfor %}
  {% endif %}
{% endif %}

constraints:
  performance:
    response_time_p95: "{{ performance.response_time | default('<500ms') }}"
    throughput: "{{ performance.throughput | default('1000 req/min') }}"
    {% if performance.concurrent_requests %}
    max_concurrent_requests: {{ performance.concurrent_requests }}
    {% endif %}
  
  scalability:
    horizontal_scaling: "{{ scalability.horizontal | default('stateless design') }}"
    {% if scalability.max_instances %}
    max_instances: {{ scalability.max_instances }}
    {% endif %}
  
  reliability:
    uptime_target: "{{ reliability.uptime | default('99.9%') }}"
    {% if reliability.circuit_breaker %}
    circuit_breaker: "{{ reliability.circuit_breaker }}"
    {% endif %}

security:
  {% if security_measures %}
  measures:
    {% for measure in security_measures %}
    - "{{ measure }}"
    {% endfor %}
  {% endif %}
  input_validation: "{{ security.validation | default('Strict input sanitization') }}"
  {% if security.encryption %}
  data_encryption: "{{ security.encryption }}"
  {% endif %}
  {% if security.audit %}
  audit_logging: "{{ security.audit }}"
  {% endif %}

observability:
  metrics:
    - "request_count_per_endpoint"
    - "response_time_percentiles"
    - "error_rate_by_status_code"
    - "active_connections"
    {% if rate_limiting %}
    - "rate_limit_violations"
    {% endif %}
  
  health_checks:
    - endpoint: "/health"
      interval: "30s"
      timeout: "5s"
    {% if dependencies %}
    - endpoint: "/health/dependencies"
      interval: "60s"
      checks: "external service connectivity"
    {% endif %}
  
  logging:
    format: "structured_json"
    level: "info"
    includes: ["request_id", "user_id", "endpoint", "response_time", "status_code"]

{% if success_criteria %}
success_criteria:
  {% for criterion in success_criteria %}
  - metric: "{{ criterion.metric }}"
    target: "{{ criterion.target }}"
  {% endfor %}
{% endif %}

tests:
  api_contract:
    {% for endpoint in api_endpoints %}
    - "{{ endpoint.method }} {{ endpoint.path }} returns {{ endpoint.expected_status | default('200') }} for valid input"
    {% endfor %}
  
  authentication:
    {% if authentication %}
    - "Unauthenticated requests return 401"
    - "Invalid tokens return 403"
    - "Valid tokens allow access to protected endpoints"
    {% endif %}
  
  error_handling:
    {% for error in error_codes %}
    - "{{ error.scenario | default('Invalid input') }} returns {{ error.code }} with descriptive message"
    {% endfor %}
  
  performance:
    - "Service responds within {{ performance.response_time | default('500ms') }} for P95 requests"
    {% if rate_limiting %}
    - "Rate limiting enforced correctly for excessive requests"
    {% endif %}
  
  {% if failure_modes %}
  resilience:
    {% for mode in failure_modes %}
    - "Service {{ mode.recovery | default('recovers gracefully') }} from {{ mode.type }}"
    {% endfor %}
  {% endif %}