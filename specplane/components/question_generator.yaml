meta:
  id: "question_generator"
  name: "Question Generator"
  version: "0.1.0"
  type: "component"
  level: "component"
  purpose: "Dynamically generates contextual questions using pattern matching and reasoning chains"
  status: "prototype"

contracts:
  interfaces:
    - name: "generate_questions"
      input: "ComponentContext"
      output: "QuestionSequence"
      logic: "pattern_analysis + reasoning_chain_construction + question_ordering"
      
    - name: "next_question"
      input: "SessionState + PreviousAnswers"
      output: "Question | Complete"
      logic: "context_analysis + dependency_checking + adaptive_selection"
      
    - name: "adapt_difficulty"
      input: "UserResponses + ExperienceLevel"
      output: "AdjustedQuestionSet"
      logic: "response_analysis + complexity_adjustment"

prototype_modes:
  p0_simple:
    question_source: "static_predefined_sets"
    total_questions: 15
    adaptive_questioning: false
    reasoning_chains: false
    file_source: "config/basic_questions.yaml"
    
  p1_smart:
    question_source: "pattern_based_generation"
    total_questions: 25
    adaptive_questioning: true
    reasoning_chains: "basic"
    context_awareness: true
    
  p2_dynamic:
    question_source: "full_reasoning_generation"
    adaptive_depth: true
    reasoning_chains: "cot_react_hybrid"
    context_awareness: "full"
    learning_from_sessions: true

components:
  - name: "Pattern_Matcher"
    description: "Identifies applicable domain patterns from component description"
    mode_behavior:
      p0: "simple_keyword_lookup"
      p1: "fuzzy_matching"
      p2: "semantic_analysis"
    
  - name: "Reasoning_Chain_Builder" 
    description: "Builds CoT sequences for complex design decisions"
    mode_behavior:
      p0: "disabled"
      p1: "basic_chains"
      p2: "full_cot_react"
    
  - name: "Context_Analyzer"
    description: "Analyzes previous answers to determine next question"
    mode_behavior:
      p0: "simple_progression"
      p1: "answer_dependent_routing"
      p2: "full_context_analysis"
    
  - name: "Coverage_Tracker"
    description: "Ensures all required aspects are covered"
    mode_behavior:
      p0: "basic_section_completion"
      p1: "weighted_coverage_scoring"
      p2: "intelligent_gap_detection"

question_generation_logic:
  p0_simple:
    method: "load_predefined_questions_by_type"
    ordering: "fixed_sequence"
    adaptation: "none"
    
  p1_smart:
    method: "pattern_based_template_expansion"
    ordering: "dependency_aware"
    adaptation: "difficulty_adjustment"
    
  p2_dynamic:
    method: "reasoning_chain_construction"
    ordering: "context_optimal"
    adaptation: "full_personalization"

data_flows:
  - name: "simple_question_generation"
    mode: "p0"
    sequence: |
      sequenceDiagram
        participant QG as Question_Generator
        participant FS as File_Storage
        
        QG->>FS: load("basic_questions.yaml")
        FS-->>QG: predefined_question_sets
        QG->>QG: select_by_component_type("storage")
        QG-->>QG: ordered_question_sequence
        
  - name: "pattern_based_generation"
    mode: "p1"
    sequence: |
      sequenceDiagram
        participant QG as Question_Generator
        participant PL as Pattern_Library
        participant FS as File_Storage
        
        QG->>PL: match_patterns("file storage")
        PL->>FS: load("patterns.yaml")
        FS-->>PL: pattern_definitions
        PL->>PL: fuzzy_match + analyze_context
        PL-->>QG: [storage_patterns, reliability_patterns]
        QG->>PL: generate_questions(patterns, context)
        PL-->>QG: contextual_question_sequence

dependencies:
  internal:
    - "Pattern_Library"  # For pattern-based generation
    - "File_Storage"     # For question templates
    - "Coverage_Assessor" # For gap analysis
  external: []

constraints:
  performance:
    question_generation_time_p95: "<1s"
    context_analysis_time: "<200ms"
    
  quality:
    question_relevance_score: ">4.0/5.0"
    coverage_completeness: ">90%"
    
  usability:
    question_clarity_threshold: ">4.5/5.0"
    session_length_target: "10-15_minutes"

error_handling:
  pattern_matching_failure:
    action: "fallback_to_generic_questions"
    
  template_expansion_error:
    action: "use_basic_question_set + log_error"
    
  context_analysis_failure:
    action: "continue_with_static_sequence"

observability:
  metrics:
    - "questions_generated_per_session"
    - "pattern_matching_success_rate"
    - "context_adaptation_effectiveness"
    - "user_question_comprehension_rate"
    
  events:
    - "questions.generation.started"
    - "questions.pattern.matched" 
    - "questions.context.analyzed"
    - "questions.sequence.completed"


tests:
  acceptance:
    - "Storage component generates backup/corruption questions automatically"
    - "UI component generates state management questions automatically"
    - "AI component generates safety/cost questions automatically"
    - "Question sequence follows dependency order (purpose → failure modes → data)"
    - "Context-aware follow-ups: offline mentioned → sync conflict questions added"
    
  human_validation:
    - "Rate question clarity 1-5: Can developer understand without explanation?"
    - "Rate question relevance 1-5: Does this question improve component design?"
    - "Completeness check: Do generated questions cover critical design aspects?"
    
  automated_metrics:
    - "questions_generated_per_session_avg between 10-25"
    - "question_generation_time_p95 < 1s"
    - "context_adaptation_trigger_rate > 30%"