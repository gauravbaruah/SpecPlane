meta:
  id: "coverage_assessor"
  name: "Coverage Assessor"
  version: "0.1.0"
  type: "component"
  level: "component"
  purpose: "Evaluates design completeness and identifies critical gaps before implementation"
  status: "prototype"

contracts:
  interfaces:
    - name: "assess_coverage"
      input: "AnsweredQuestions + ComponentType"
      output: "CoverageReport"
      logic: "systematic_completeness_check + gap_identification + scoring"
      
    - name: "calculate_score"
      input: "AnsweredQuestions + WeightingRules"
      output: "CoverageScore"
      logic: "weighted_scoring + critical_section_validation"
      
    - name: "identify_gaps"
      input: "ComponentSpec + RequiredSections"
      output: "Gap[]"
      logic: "pattern_matching + requirement_validation + priority_ranking"
      
    - name: "suggest_improvements"
      input: "CoverageReport + ComponentType"
      output: "Recommendation[]"
      logic: "gap_analysis + best_practice_matching + actionable_suggestions"
      
    # NEW: Added missing component detection
    - name: "scan_architecture_gaps"
      input: "ProjectDirectory + ArchitectureSpec"
      output: "MissingComponentReport"
      logic: "dependency_analysis + missing_component_detection + impact_assessment"

  assessment_framework:
    source: "config/assessment_rules.yaml"
    purpose: "Loads required sections and scoring weights dynamically"
    
    # These will be loaded from config files, not hardcoded:
    # required_sections: loaded from assessment_rules.yaml
    # scoring_weights: loaded from scoring_rules.yaml
    # gap_severity: loaded from gap_patterns.yaml

prototype_modes:
  p0_simple:
    assessment_method: "basic_section_completion"
    scoring_algorithm: "simple_percentage"
    gap_detection: "missing_required_only"
    total_possible_score: 100
    
  p1_smart:
    assessment_method: "weighted_section_analysis"
    scoring_algorithm: "weighted_percentage + penalties"
    gap_detection: "pattern_based + missing_sections"
    contextual_adjustments: true
    
  p2_dynamic:
    assessment_method: "intelligent_quality_analysis"
    scoring_algorithm: "ml_based_scoring + human_feedback"
    gap_detection: "semantic_analysis + predictive_gaps"
    continuous_learning: true

data:
  assessment_rules:
    source: "config/assessment_rules.yaml"
    schema: "AssessmentRule"
    purpose: "Rules for evaluating design completeness and quality"
    
  gap_patterns:
    source: "config/gap_patterns.yaml" 
    schema: "GapPattern"
    purpose: "Pattern definitions for detecting common design gaps"
    
  scoring_rules:
    source: "config/scoring_rules.yaml"
    schema: "ScoringRule"
    purpose: "Algorithms and weights for calculating coverage scores"

data_flows:
  - name: "complete_coverage_assessment"
    sequence: |
      sequenceDiagram
        participant CA as Coverage_Assessor
        participant FS as File_Storage
        participant PL as Pattern_Library
        
        CA->>FS: load("assessment_rules.yaml")
        CA->>FS: load("gap_patterns.yaml")
        CA->>CA: analyze_completeness(answers)
        CA->>PL: check_component_patterns(type)
        CA->>CA: calculate_weighted_score()
        CA->>CA: identify_critical_gaps()
        CA-->>CA: generate_recommendations()
        
  # NEW: Architecture gap detection flow
  - name: "architecture_gap_detection"
    sequence: |
      sequenceDiagram
        participant CA as Coverage_Assessor
        participant FS as File_Storage
        
        CA->>FS: scan_project_directory()
        CA->>FS: load_all_specs()
        CA->>CA: extract_dependencies()
        CA->>CA: identify_missing_components()
        CA->>CA: assess_dependency_impact()
        CA-->>CA: generate_missing_component_report()

dependencies:
  internal:
    - "Pattern_Library"  # For pattern-based gap detection
    - "File_Storage"     # For assessment rules and templates
  external: []

constraints:
  performance:
    assessment_time: "<2s"
    gap_detection_time: "<1s"
    architecture_scan_time: "<5s"  # NEW
    
  quality:
    gap_detection_accuracy: ">90%"
    false_positive_rate: "<5%"
    recommendation_relevance: ">85%"
    missing_component_detection_accuracy: ">95%"  # NEW

error_handling:
  missing_assessment_rules:
    action: "use_default_rules + log_warning"
    
  invalid_component_type:
    action: "fallback_to_generic_assessment"
    
  scoring_calculation_error:
    action: "manual_scoring_fallback + error_report"
    
  # NEW: Architecture scanning errors
  project_directory_not_found:
    action: "skip_architecture_assessment + log_warning"
    
  malformed_spec_file:
    action: "log_error + continue_with_valid_specs"

# CONSOLIDATED: Combined both observability sections
observability:
  # Automated metrics
  automated_metrics:
    - name: "coverage_score_distribution"
      measurement: "histogram of all assessment scores"
      
    - name: "gap_detection_accuracy"  
      measurement: "automated validation against known test cases"
      
    - name: "assessment_completion_time"
      measurement: "time from input to output"
      
    - name: "missing_component_detection_rate"  # NEW
      measurement: "percentage of missing dependencies detected"
      
  # Human feedback metrics  
  human_metrics:
    - name: "recommendation_usefulness"
      measurement: "human rating 1-5 scale"
      collection: "post-session survey"
      frequency: "10% of sessions"
      
    - name: "question_clarity"
      measurement: "human rating 1-5 scale"  
      collection: "embedded in interview flow"
      question: "Was this question clear and actionable?"
      
    - name: "generated_spec_quality"
      measurement: "human assessment of output quality"
      collection: "follow-up email after 1 week"
      frequency: "5% of sessions"
      
  # Standard metrics
  metrics:
    - "assessments_completed_per_day"
    - "average_coverage_score"
    - "gap_detection_accuracy"
    - "recommendation_acceptance_rate"
    
  events:
    - "coverage.assessment.started"
    - "coverage.score.calculated"
    - "coverage.gaps.identified"
    - "coverage.recommendations.generated"
    - "coverage.architecture.scanned"  # NEW
    - "coverage.missing_components.detected"  # NEW
    
  metric_collection:
    automated_pipeline:
      - "Events logged to .specplane/logs/events.jsonl"
      - "Metrics aggregated to .specplane/logs/metrics.json daily"
      - "Dashboard generated from metrics.json weekly"
      
    human_feedback:
      - "Rating prompts embedded in CLI at natural breakpoints"
      - "Optional feedback survey at session completion"
      - "Follow-up quality assessment via email (if provided)"

# Example assessment output
example_outputs:
  basic_assessment:
    component_name: "file_storage"
    coverage_score: 85
    sections_completed: ["purpose", "interfaces", "error_handling"]
    sections_missing: ["observability", "performance_constraints"]
    
  detailed_assessment:
    component_name: "user_authentication"
    coverage_score: 72
    gaps:
      critical: ["missing_rate_limiting", "no_password_policy"]
      important: ["incomplete_error_handling", "missing_audit_logs"]
      moderate: ["basic_monitoring_only"]
    recommendations:
      - "Add rate limiting to prevent brute force attacks"
      - "Define password complexity requirements"
      - "Implement comprehensive error response codes"
      
  # NEW: Architecture gap report
  architecture_assessment:
    project_name: "SpecPlane"
    missing_components:
      critical:
        - component: "EmailNotificationService"
          referenced_by: ["user_authentication.yaml", "session_orchestrator.yaml"]
          impact: "Users won't receive confirmation emails"
          recommendation: "Create email service spec with SMTP configuration"
      moderate:
        - component: "CacheManager"
          referenced_by: ["pattern_library.yaml"]
          impact: "Pattern matching may be slower"
          recommendation: "Add caching layer spec for performance optimization"

tests:
  acceptance:
    - "Empty answers object returns coverage_score: 0"
    - "All required questions answered returns coverage_score >= 70"
    - "Missing storage backup_strategy triggers critical gap warning"
    - "UI component without states triggers important gap warning"
    - "Gap recommendations include specific actionable text"
    - "Assessment completes in <2s for typical component (15 questions)"
    # NEW: Architecture testing
    - "Missing dependency components detected with severity: critical"
    - "Architecture scan completes in <5s for typical project (10 specs)"
    - "Orphaned components identified with recommendation to remove or reference"

validation_scenarios:
  storage_component:
    input: {component_type: "storage", backup_strategy: null}
    expected_gaps: ["critical: missing_backup_strategy"]
    expected_recommendation: "Add backup and recovery procedures with testing plan"
    
  complete_component:
    input: {all_required_sections: present}
    expected_score: ">= 85"
    expected_gaps: []
    
  # NEW: Architecture validation
  missing_dependency:
    input: {component_references: ["EmailService"], existing_specs: []}
    expected_gaps: ["critical: missing_referenced_component"]
    expected_recommendation: "Create spec for missing dependency component"