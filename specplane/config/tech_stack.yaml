meta:
  version: "0.1.0"
  purpose: "Technology stack configuration and preferences for code generation"

# Default tech stacks by application type
default_stacks:
  cli_application:
    language: "Python"
    framework: "Typer"
    libraries: ["Pydantic", "PyYAML", "Jinja2"]
    package_manager: "pip"
    testing: "pytest"
    
  web_application:
    language: "TypeScript"
    framework: "React"
    libraries: ["Next.js", "Tailwind CSS", "Prisma"]
    package_manager: "npm"
    testing: "Jest"
    
  mobile_application:
    language: "Dart"
    framework: "Flutter"
    libraries: ["Provider", "Dio", "Hive"]
    package_manager: "pub"
    testing: "flutter_test"
    
  api_service:
    language: "Python"
    framework: "FastAPI"
    libraries: ["SQLAlchemy", "Pydantic", "Alembic"]
    package_manager: "pip"
    testing: "pytest"
    database: "PostgreSQL"
    
  desktop_application:
    language: "Rust"
    framework: "Tauri"
    libraries: ["serde", "tokio", "clap"]
    package_manager: "cargo"
    testing: "cargo test"

# User customizable tech stack
user_preferences:
  # Can be overridden by user during onboarding
  preferred_language: null      # "Python", "TypeScript", "Dart", "Rust", etc.
  preferred_framework: null     # "React", "Flutter", "FastAPI", etc.
  preferred_database: null      # "PostgreSQL", "SQLite", "MongoDB", etc.
  preferred_testing: null       # "pytest", "Jest", "flutter_test", etc.
  coding_style: null           # "functional", "object_oriented", "declarative"

# Language-specific configurations
language_configs:
  Python:
    version: "3.11+"
    style_guide: "PEP 8"
    formatter: "black"
    linter: "ruff"
    type_checker: "mypy"
    async_support: true
    package_structure: "src-layout"
    
  TypeScript:
    version: "5.0+"
    style_guide: "Airbnb"
    formatter: "prettier"
    linter: "eslint"
    strict_mode: true
    target: "ES2022"
    
  Dart:
    version: "3.0+"
    style_guide: "Effective Dart"
    formatter: "dart format"
    linter: "dart analyze"
    null_safety: true
    
  Rust:
    version: "1.70+"
    edition: "2021"
    formatter: "rustfmt"
    linter: "clippy"
    async_runtime: "tokio"

# Framework-specific configurations
framework_configs:
  React:
    version: "18+"
    patterns: ["hooks", "functional_components"]
    state_management: "useState + Context"
    styling: "CSS Modules"
    
  Flutter:
    version: "3.10+"
    patterns: ["widget_composition", "provider_pattern"]
    state_management: "Provider"
    navigation: "go_router"
    
  FastAPI:
    version: "0.100+"
    patterns: ["dependency_injection", "async_handlers"]
    documentation: "automatic_openapi"
    middleware: ["CORS", "authentication"]
    
  Typer:
    version: "0.9+"
    patterns: ["command_groups", "rich_output"]
    configuration: "click_context"

# Integration and API configurations
integrations:
  external_apis:
    openai:
      library: "openai"
      auth_method: "api_key"
      environment_var: "OPENAI_API_KEY"
      
    anthropic:
      library: "anthropic"
      auth_method: "api_key" 
      environment_var: "ANTHROPIC_API_KEY"
      
    github:
      library: "PyGithub"
      auth_method: "token"
      environment_var: "GITHUB_TOKEN"
      
  databases:
    postgresql:
      driver: "psycopg2"
      orm: "SQLAlchemy"
      migration_tool: "Alembic"
      
    sqlite:
      driver: "sqlite3"
      orm: "SQLAlchemy"
      file_location: "data/"
      
    mongodb:
      driver: "pymongo"
      orm: "MongoEngine"

# Code generation preferences
generation_preferences:
  file_organization:
    structure: "feature_based"     # "feature_based", "layer_based", "domain_based"
    test_location: "alongside"     # "alongside", "separate_directory"
    config_location: "root"        # "root", "config_directory"
    
  code_style:
    max_line_length: 88
    indent_size: 4
    quote_style: "double"          # "single", "double"
    trailing_commas: true
    
  documentation:
    docstring_style: "google"      # "google", "numpy", "sphinx"
    inline_comments: "moderate"    # "minimal", "moderate", "verbose"
    readme_sections: ["purpose", "installation", "usage", "testing"]
    
  error_handling:
    strategy: "explicit"           # "explicit", "propagate", "catch_all"
    logging_level: "info"
    custom_exceptions: true

# Deployment and environment configurations
deployment:
  containerization:
    platform: "docker"
    base_image: "python:3.11-slim"
    multi_stage: true
    
  ci_cd:
    platform: "github_actions"
    test_on_push: true
    deploy_on_merge: false
    
  monitoring:
    logging: "structured_json"
    metrics: "prometheus"
    tracing: "opentelemetry"

# Questions to ask during onboarding
onboarding_questions:
  - id: "primary_language"
    prompt: "What programming language do you prefer?"
    type: "select"
    options: ["Python", "TypeScript", "Dart", "Rust", "Go", "Java"]
    default: "Python"
    
  - id: "application_type"
    prompt: "What type of application are you building?"
    type: "select"
    options: ["CLI Tool", "Web App", "Mobile App", "API Service", "Desktop App"]
    default: "CLI Tool"
    
  - id: "framework_preference"
    prompt: "Do you have a preferred framework?"
    type: "conditional_select"
    depends_on: "primary_language"
    options:
      Python: ["FastAPI", "Django", "Flask", "Typer", "No preference"]
      TypeScript: ["React", "Next.js", "Vue", "Angular", "No preference"]
      Dart: ["Flutter", "Dart Frog", "No preference"]
    
  - id: "database_preference"
    prompt: "What database do you prefer?"
    type: "select"
    options: ["PostgreSQL", "SQLite", "MongoDB", "MySQL", "File-based", "No database"]
    default: "SQLite"
    
  - id: "testing_approach"
    prompt: "How comprehensive should testing be?"
    type: "select"
    options: ["Basic unit tests", "Full test coverage", "Integration tests only", "Minimal testing"]
    default: "Basic unit tests"
    
  - id: "deployment_target"
    prompt: "Where will this be deployed?"
    type: "select"
    options: ["Local development only", "Cloud (AWS/GCP/Azure)", "Self-hosted server", "Package distribution"]
    default: "Local development only"

# Template selection logic
template_selection:
  cursor_prompts:
    natural_language:
      component: "templates/prompts/natural/cursor_component.md.j2"
      system: "templates/prompts/natural/cursor_system.md.j2"
      
    language_specific:
      python: "templates/prompts/advanced/cursor_python.md.j2"
      typescript: "templates/prompts/advanced/cursor_react.md.j2"
      dart: "templates/prompts/advanced/cursor_flutter.md.j2"
      
  spec_generation:
    generic: "templates/specs/component.yaml.j2"
    widget: "templates/specs/widget.yaml.j2"
    service: "templates/specs/service.yaml.j2"
    agent: "templates/specs/agent.yaml.j2"

# Environment variable templates
environment_templates:
  development:
    LOG_LEVEL: "debug"
    ENVIRONMENT: "development"
    
  production:
    LOG_LEVEL: "info"
    ENVIRONMENT: "production"
    
  testing:
    LOG_LEVEL: "warning"
    ENVIRONMENT: "test"